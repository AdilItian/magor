import { Request, Response } from "express";
import Media from "../../models/media";
import Transcript from "../../models/transcript";
import ICRequest from "../../models/icRequest";
import {
  uploadFile,
  checkStatus,
  retrieveIc,
} from "../../../services/api-image-caption";
import _ from "lodash";
import { uploadTranscriptToAzure } from "../../../services/storage-azure";
import { addMediaToIndexQueue } from "../../../services/transcript-indexer";
import { extname } from "path";

export const handleGenerateImageCaption = async (
  req: Request,
  res: Response
) => {
  const { id } = req.query;

  try {
    const media = await Media.findById(id);
    const fileUrl = media["tempResourceUrl"];
    const icRequest = new ICRequest({
      mediaId: id,
    });
    await icRequest.save();
    const icrId = await uploadFile(fileUrl);
    icRequest["icrId"] = icrId;
    await icRequest.save();
    return res.status(200).json({
      success: true,
      icRequest,
    });
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      error,
    });
  }
};

export const handleFetchStatus = async (req: Request, res: Response) => {
  const { media: mediaId, icr: icrId } = req.query;
  try {
    // TODO Replace with ICRequest
    const icRequest = await ICRequest.findOne({
      icrId,
      mediaId: mediaId,
      status: "pending",
    });

    if (_.isNull(icRequest)) {
      return res.status(400).json({ success: false, error: "Job not found." });
    }

    if (_.isUndefined(icrId)) {
      throw new Error("corrupt data");
    }

    // @ts-ignore
    const response = await checkStatus(icrId);

    const icrStatus = response.status;

    if (icrStatus !== "Done") {
      return res.json({ success: false, status: "processing" });
    }

    // icrStatus completed

    // @ts-ignore
    const icPath = await retrieveIc(icrId);

    icRequest["status"] = "success";
    await icRequest.save();

    //@ts-ignore
    const format = extname(icPath).substring(1);

    const imageCaption = new Transcript({
      format,
      transcriptType: "imageCaption",
      tempUploadStatus: "success",
      tempResourceUrl: icPath,
      mediaId,
      isAutoGenerated: true,
    });
    await imageCaption.save();
    console.log(`Generated Image Caption ID:`, imageCaption["_id"]);

    // TODO Replace with uploadImageCaptionToAzure
    uploadTranscriptToAzure(
      imageCaption["_id"],
      imageCaption["tempResourceUrl"]
    );

    const media = await Media.findById(mediaId);
    media[`_imageCaptions`].push(imageCaption["_id"]);
    media[`_defaultImageCaption`] = imageCaption["_id"];
    await media.save();
    addMediaToIndexQueue(media["_id"]);
    console.log(
      `Added image caption ${imageCaption["_id"]} to ${media["_id"]} as default!`
    );
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      error,
    });
  }
};

export const handleFetchCurrentRequests = async (
  req: Request,
  res: Response
) => {
  const { id } = req.query;
  try {
    // FETCH STATUS
    const icRequests = await ICRequest.find({
      mediaId: id,
      status: "pending",
    });
    return res.status(200).json({ success: true, requests: icRequests });
  } catch (error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      error,
    });
  }
};
